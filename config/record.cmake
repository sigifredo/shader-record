find_package(Git)

set(TEST001_VERSION 0x010001)
set(TEST001_VERSION_MAJOR 1)
set(TEST001_VERSION_MINOR 0)
set(TEST001_VERSION_REVISION 1)

# the commit's SHA1, and whether the building workspace was dirty or not
execute_process(COMMAND
    "${GIT_EXECUTABLE}" describe --match=NeVeRmAtCh --always --dirty
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
    OUTPUT_VARIABLE GIT_SHA1
    ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

# the date of the commit
execute_process(COMMAND
    "${GIT_EXECUTABLE}" log -1 --format=%ad
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
    OUTPUT_VARIABLE GIT_DATE
    ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)

set(TEST001_VERSION_STR \"${TEST001_VERSION_MAJOR}.${TEST001_VERSION_MINOR}.${TEST001_VERSION_REVISION}-${GIT_SHA1})

if (USE_OPENCV)
    set(TEST001_VERSION_STR ${TEST001_VERSION_STR}cv\")
    add_definitions( -DUSE_OPENCV )
else()
    set(TEST001_VERSION_STR ${TEST001_VERSION_STR}\")
endif(USE_OPENCV)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
add_definitions( -Wall -O3 -DTEST001_VERSION=${TEST001_VERSION} -DTEST001_VERSION_STR=${TEST001_VERSION_STR} -DTEST001_VERSION_DATE=\"${GIT_DATE}\" )

# generate version.cc
# configure_file("${CMAKE_CURRENT_SOURCE_DIR}/version.cc.in" "${CMAKE_CURRENT_BINARY_DIR}/version.cc" @ONLY)
# list(APPEND SOURCES "${CMAKE_CURRENT_BINARY_DIR}/version.cc" version.hh)
